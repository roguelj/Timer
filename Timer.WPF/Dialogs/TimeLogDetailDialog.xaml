<UserControl
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:prism="http://prismlibrary.com/"
            xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
            xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
            xmlns:ComponentModel="clr-namespace:System.ComponentModel;assembly=WindowsBase"
            xmlns:s="clr-namespace:System;assembly=mscorlib"
            xmlns:res="clr-namespace:Timer.Shared.Resources;assembly=Timer.Shared"
            xmlns:converters="clr-namespace:Timer.WPF.Converters"
            xmlns:viewmodels="clr-namespace:Timer.WPF.ViewModels"
            x:Class="Timer.WPF.Dialogs.TimeLogDetailDialog"
            d:DataContext="{d:DesignInstance Type={x:Type viewmodels:TimeLogDetailViewModel}}"
            mc:Ignorable="d" 
            Style="{DynamicResource DialogStyle}"
            >


    <UserControl.Resources>

        <CollectionViewSource Source="{Binding Tasks}" x:Key="TasksCollectionViewSource" Filter="CollectionViewSource_Filter" >
            
            <CollectionViewSource.GroupDescriptions>
                <PropertyGroupDescription PropertyName="TaskListName" />
            </CollectionViewSource.GroupDescriptions>
            
            <CollectionViewSource.SortDescriptions>
                <ComponentModel:SortDescription PropertyName="TaskListName"/>
            </CollectionViewSource.SortDescriptions>
            
        </CollectionViewSource>
        
        <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />

    </UserControl.Resources>


    <prism:Dialog.WindowStyle>
        <Style TargetType="{x:Type Window}">
            <Setter Property="ResizeMode" Value="NoResize"/>
            <Setter Property="ShowInTaskbar" Value="True"/>
            <Setter Property="SizeToContent" Value="WidthAndHeight"/>
        </Style>
    </prism:Dialog.WindowStyle>

    <DockPanel >
        <DockPanel.Style>
            <Style TargetType="{x:Type DockPanel}">
                <Setter Property="IsEnabled" Value="False" />
                <Style.Triggers>
                    <DataTrigger Binding="{Binding IsInitialising, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Value="False">
                        <Setter Property="IsEnabled" Value="True" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </DockPanel.Style>

        
        <!-- log billable, non billable, cancel -->
        <UniformGrid DockPanel.Dock="Bottom" HorizontalAlignment="Stretch" Margin="5" Columns="3">

            
            <!-- log billable -->
            <Button Name="LogBillableTimeButton"
                    Command="{Binding CloseDialogOkCommand}" 
                    Content="{x:Static res:Resources.OkBillableButtonText}" 
                    Style="{DynamicResource OkCancelButtonControlStyle}"
                    Template="{DynamicResource BillableButtonTemplate}">
                                
                <Button.CommandParameter>
                    <s:Boolean>True</s:Boolean>
                </Button.CommandParameter>
                
            </Button>


            <!-- log non billable -->
            <Button Name="LogNonBillableTimeButton"
                    Content="{x:Static res:Resources.OkNonBillableButtonText}" 
                    Command="{Binding CloseDialogOkCommand}" 
                    Style="{DynamicResource OkCancelButtonControlStyle}"
                    Template="{DynamicResource NonBillableButtonTemplate}">
                
                <Button.CommandParameter>
                    <s:Boolean>False</s:Boolean>
                </Button.CommandParameter>
                
            </Button>

            
            <!-- cancel -->
            <Button Name="CancelButton"
                    Command="{Binding CloseDialogCancelCommand}" 
                    Content="{x:Static res:Resources.CancelButtonText}" 
                    Style="{DynamicResource OkCancelButtonControlStyle}"
                    Template="{DynamicResource CancelButtonTemplate}"/>
            
        </UniformGrid>


        <Grid>

            <Grid.ColumnDefinitions>
                <ColumnDefinition MinWidth="100" MaxWidth="100"/>
                <ColumnDefinition  MinWidth="300" MaxWidth="400"/>
            </Grid.ColumnDefinitions>

            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>


            <!-- start options header -->
            <xctk:DropDownButton Grid.Row="0" Grid.Column="0" Style="{DynamicResource DropDownButtonStyle}" Content="{x:Static res:Resources.StartLabelText}" ButtonBase.Click="Button_Click">
     
                
                <xctk:DropDownButton.DropDownContent>
                    
                    <StackPanel Orientation="Vertical" Style="{DynamicResource DropDownButtonContentStackPanelStyle}">
                        
                        <Button Style="{DynamicResource DropDownSubButtonStyle}" Command="{Binding SetStartCommand}" Content="{x:Static res:Resources.StartOfDayButtonText}" />

                        <Button Style="{DynamicResource DropDownSubButtonStyle}" Command="{Binding SetStartCommand}" Content="{x:Static res:Resources.NowButtonText}">
                            <Button.CommandParameter>
                                <s:Int32>0</s:Int32>
                            </Button.CommandParameter>
                        </Button>

                        <Button Style="{DynamicResource DropDownSubButtonStyle}" Command="{Binding SetStartCommand}" Content="{x:Static res:Resources.TenMinutesAgoButtonText}" >
                            <Button.CommandParameter>
                                <s:Int32>-10</s:Int32>
                            </Button.CommandParameter>
                        </Button>

                        <Button Style="{DynamicResource DropDownSubButtonStyle}" Command="{Binding SetStartCommand}" Content="{x:Static res:Resources.TwentyMinutesAgoButtonText}">
                            <Button.CommandParameter>
                                <s:Int32>-20</s:Int32>
                            </Button.CommandParameter>
                        </Button>

                        <Button Style="{DynamicResource DropDownSubButtonStyle}" Command="{Binding SetStartCommand}" Content="{x:Static res:Resources.ThirtyMinutesAgoButtonText}">
                            <Button.CommandParameter>
                                <s:Int32>-30</s:Int32>
                            </Button.CommandParameter>
                        </Button>

                        <Button Style="{DynamicResource DropDownSubButtonStyle}" Command="{Binding SetStartCommand}" Content="{x:Static res:Resources.AnHourAgoButtonText}">
                            <Button.CommandParameter>
                                <s:Int32>-60</s:Int32>
                            </Button.CommandParameter>
                        </Button>

                        <Button Style="{DynamicResource DropDownSubButtonStyle}" Command="{Binding SetStartToEndOfBreakCommand}" Content="{x:Static res:Resources.SetStartToEndOfBreakButtonText}"/>

                        <Button Style="{DynamicResource DropDownSubButtonStyle}" Command="{Binding SetStartToPcBootTimeCommand}" Content="{x:Static res:Resources.SetStartToPcBootTimeButtonText}"/>
                        
                    </StackPanel>

                </xctk:DropDownButton.DropDownContent>
          
            </xctk:DropDownButton>

            <!-- start selector -->
            <xctk:DateTimePicker Grid.Row="0" Grid.Column="1" Value="{Binding StartDateTime, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Style="{DynamicResource DateTimePickerStyle}" >

            </xctk:DateTimePicker>


            <!-- end options header -->
            <xctk:DropDownButton Grid.Row="1" Grid.Column="0" Style="{DynamicResource DropDownButtonStyle}" Content="{x:Static res:Resources.EndLabelText}" ButtonBase.Click="Button_Click">
                <xctk:DropDownButton.DropDownContent>
                    <StackPanel Orientation="Vertical" Style="{DynamicResource DropDownButtonContentStackPanelStyle}">

                        <Button Style="{DynamicResource DropDownSubButtonStyle}" Command="{Binding SetEndCommand}" Content="{x:Static res:Resources.ThirtyMinutesAgoButtonText}">
                            <Button.CommandParameter>
                                <s:Int32>-30</s:Int32>
                            </Button.CommandParameter>
                        </Button>

                        <Button Style="{DynamicResource DropDownSubButtonStyle}" Command="{Binding SetEndCommand}" Content="{x:Static res:Resources.TwentyMinutesAgoButtonText}">
                            <Button.CommandParameter>
                                <s:Int32>-20</s:Int32>
                            </Button.CommandParameter>
                        </Button>

                        <Button Style="{DynamicResource DropDownSubButtonStyle}" Command="{Binding SetEndCommand}" Content="{x:Static res:Resources.TenMinutesAgoButtonText}">
                            <Button.CommandParameter>
                                <s:Int32>-10</s:Int32>
                            </Button.CommandParameter>
                        </Button>

                        <Button Style="{DynamicResource DropDownSubButtonStyle}" Command="{Binding SetEndCommand}" Content="{x:Static res:Resources.NowButtonText}">
                            <Button.CommandParameter>
                                <s:Int32>0</s:Int32>
                            </Button.CommandParameter>
                        </Button>

                        <Button Style="{DynamicResource DropDownSubButtonStyle}" Command="{Binding SetEndCommand}" Content="{x:Static res:Resources.TenMinutesFromNowButtonText}">
                            <Button.CommandParameter>
                                <s:Int32>10</s:Int32>
                            </Button.CommandParameter>
                        </Button>

                        <Button Style="{DynamicResource DropDownSubButtonStyle}" Command="{Binding SetEndCommand}" Content="{x:Static res:Resources.TwentyMinutesFromNowButtonText}">
                            <Button.CommandParameter>
                                <s:Int32>20</s:Int32>
                            </Button.CommandParameter>
                        </Button>

                        <Button Style="{DynamicResource DropDownSubButtonStyle}" Command="{Binding SetEndCommand}" Content="{x:Static res:Resources.ThirtyMinutesFromNowButtonText}">
                            <Button.CommandParameter>
                                <s:Int32>30</s:Int32>
                            </Button.CommandParameter>
                        </Button>

                        <Button Style="{DynamicResource DropDownSubButtonStyle}" Command="{Binding SetEndToStartOfBreakCommand}" Content="{x:Static res:Resources.SetEndToStartOfBreakButtonText}"/>
                        
                    </StackPanel>

                </xctk:DropDownButton.DropDownContent>
            </xctk:DropDownButton>

            <!-- end selector -->
            <xctk:DateTimePicker Grid.Row="1" Grid.Column="1" Value="{Binding EndDateTime, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Style="{DynamicResource DateTimePickerStyle}"/>


            <!-- duration -->
            <Label Grid.Row="2" Grid.Column="0" Content="{x:Static res:Resources.DurationLabelText}" Style="{DynamicResource HeaderStyle}" />
            <Label Grid.Row="2" Grid.Column="1" Style="{DynamicResource DurationLabelControlStyle}">
                <TextBlock Text="{Binding FriendlyDuration, FallbackValue=DURATION}" />
            </Label>


            <!-- projects options header -->
            <xctk:DropDownButton Style="{DynamicResource DropDownButtonStyle}" Grid.Row="3" Grid.Column="0"  Content="{x:Static res:Resources.ProjectLabelText}" ButtonBase.Click="Button_Click">

                <xctk:DropDownButton.DropDownContent>
                    <StackPanel Orientation="Vertical" Style="{DynamicResource DropDownButtonContentStackPanelStyle}">
                        <Button Content="{x:Static res:Resources.LoadAllButtonText}" Command="{Binding LoadAllCommand}" Style="{DynamicResource DropDownSubButtonStyle}" CommandParameter="All"/>
                        <Button Content="{x:Static res:Resources.LoadStarredButtonText}" Command="{Binding LoadAllCommand}" Style="{DynamicResource DropDownSubButtonStyle}" CommandParameter="Starred"/>
                    </StackPanel>
                </xctk:DropDownButton.DropDownContent>

            </xctk:DropDownButton>

            <!-- project selector -->
            <ComboBox Grid.Row="3" Grid.Column="1" 
                      ItemsSource="{Binding Projects}" 
                      IsSynchronizedWithCurrentItem="True" 
                      SelectedItem="{Binding SelectedProject}" 
                      Style="{DynamicResource EntityComboBoxSelectorStyle}"
                      ItemTemplate="{StaticResource NameDataTemplate}" 
                      IsTextSearchEnabled="True">

                <ComboBox.Resources>
                    <SolidColorBrush x:Key="{x:Static SystemColors.WindowBrushKey}" Color="{DynamicResource ActionElementBackgroundColour}" />
                </ComboBox.Resources>
                
            </ComboBox>


            <!-- tasks options header -->
            <xctk:DropDownButton Grid.Row="4" Grid.Column="0" Style="{DynamicResource DropDownButtonStyle}" Content="{x:Static res:Resources.TaskLabelText}" ButtonBase.Click="Button_Click">

                <xctk:DropDownButton.DropDownContent>
                    <StackPanel Orientation="Vertical" Style="{DynamicResource DropDownButtonContentStackPanelStyle}">

                        <Button Content="{x:Static res:Resources.ClearSelectedTaskButtonText}" Style="{DynamicResource DropDownSubButtonStyle}" Command="{Binding ClearTaskCommand}"/>

                        <Button Content="{x:Static res:Resources.LoadTasksForSelectedProjectButtonText}" Style="{DynamicResource DropDownSubButtonStyle}" Command="{Binding LoadAllTasksForSelectedProjectCommand}" />

                        <Button Content="{x:Static res:Resources.LoadMyTasksForSelectedProjectButtonText}" Style="{DynamicResource DropDownSubButtonStyle}" Command="{Binding LoadMyTasksForSelectedProjectCommand}" />

                    </StackPanel>

                </xctk:DropDownButton.DropDownContent>
            </xctk:DropDownButton>

            <!-- task selector -->
            <ComboBox Grid.Row="4" Grid.Column="1" 
                      ItemsSource="{Binding Source={StaticResource TasksCollectionViewSource}}" 
                      IsSynchronizedWithCurrentItem="True" 
                      SelectedItem="{Binding SelectedTask}" 
                      Style="{DynamicResource EntityComboBoxSelectorStyle}"
                      x:Name="TaskComboBox"
                      ItemTemplate="{StaticResource NameDataTemplate}"
                      IsTextSearchEnabled="True">
                
                <ComboBox.Resources>
                    <SolidColorBrush x:Key="{x:Static SystemColors.WindowBrushKey}" Color="{DynamicResource ActionElementBackgroundColour}" />
                </ComboBox.Resources>
                
                <ComboBox.GroupStyle>
                    <GroupStyle>
                        <GroupStyle.HeaderTemplate>
                            <DataTemplate>
                                <Border Style="{DynamicResource ComboBoxGroupHeaderBorderControlStyle}">
                                    <Label Content="{Binding Name}" Style="{DynamicResource ComboBoxGroupHeaderLabelControlStyle}"/>
                                </Border>
                            </DataTemplate>
                        </GroupStyle.HeaderTemplate>
                    </GroupStyle>
                </ComboBox.GroupStyle>

            </ComboBox>


            <!-- tags -->
            <Label Grid.Row="5" Grid.Column="0" Content="{x:Static res:Resources.TagLabelText}" Style="{DynamicResource HeaderStyle}" />
            <ListBox Grid.Row="5" Grid.Column="1" MaxHeight="300" 
                 ItemsSource="{Binding Tags}" 
                 SelectionMode="Multiple" 
                 x:Name="SelectedTagsListBox" 
                 SelectionChanged="SelectedTagsListBox_SelectionChanged" 
                 Style="{DynamicResource TagListBoxStyle}"
                 ItemTemplate="{StaticResource ColouredNameDataTemplate}">

                <ListBox.ItemsPanel>
                    <ItemsPanelTemplate>
                        <WrapPanel MaxWidth="300" Orientation="Horizontal" />
                    </ItemsPanelTemplate>
                </ListBox.ItemsPanel>
            </ListBox>


            <!-- description -->
            <Label Grid.Row="6" Grid.Column="0"  Content="{x:Static res:Resources.DescriptionLabelText}" Style="{DynamicResource HeaderStyle}" VerticalAlignment="Center"/>
            <TextBox Grid.Row="6" Grid.Column="1" Text="{Binding Description, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" MinHeight="50" Style="{DynamicResource MultiLineTextBoxStyle}"/>

        </Grid>


    </DockPanel>

</UserControl>
